{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","posts","filter","id","userId","e","_this2","fetch","then","response","json","data","setState","target","value","_this3","postObjects","map","postData","react_default","a","createElement","Card","className","style","width","key","Body","Title","title","Text","body","Form","Group","controlId","Label","Control","type","placeholder","onChange","handleChangeUserId","bind","handleChangeId","Check","label","onClick","handleClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46896905.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Card, Form } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tposts: [],\n\t\t\tfilter: false,\n\t\t\tid: '',\n\t\t\tuserId: ''\n\t\t};\n\t}\n\n\tcomponentDidMount(e) {\n\t\tfetch('https://jsonplaceholder.typicode.com/posts')\n\t\t\t.then((response) => {\n\t\t\t\tlet dataPromise = response.json();\n\t\t\t\treturn dataPromise;\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tthis.setState({ posts: data });\n\t\t\t})\n\n\t}\n\n\thandleClick(e) {\n\t\tthis.setState({ filter: !this.state.filter })\n\t}\n\n\thandleChangeId(e) {\n\t\tthis.setState({ id: e.target.value })\n\t}\n\n\thandleChangeUserId(e) {\n\t\tthis.setState({ userId: e.target.value })\n\t}\n\n\trender() {\n\t\tlet postObjects = this.state.posts.map((postData) => {\n\t\t\treturn (\n\t\t\t\t<Card className='d-flex' style={{ width: '18rem' }} key={postData.id}>\n\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t<Card.Title>{postData.title}</Card.Title>\n\t\t\t\t\t\t<Card.Text>\n\t\t\t\t\t\t\t{postData.body}\n\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t</Card.Body>\n\t\t\t\t</Card>\n\t\t\t);\n\t\t});\n\t\tif (this.state.filter) {\n\t\t\tlet filteredData = this.state.posts.filter((postData) => {\n\t\t\t\treturn postData.userId == this.state.userId || postData.id == this.state.id;\n\t\t\t});\n\t\t\tpostObjects = filteredData.map((postData) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Card className='d-flex' style={{ width: '18rem' }} key={postData.id}>\n\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t<Card.Title>{postData.title}</Card.Title>\n\t\t\t\t\t\t\t<Card.Text>\n\t\t\t\t\t\t\t\t{postData.body}\n\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t);\n\t\t\t})\n\t\t};\n\n\t\treturn (\n\t\t\t<div className='container justify-content-center'>\n\t\t\t\t\t<Form className='d-flex justify-content-center'>\n\t\t\t\t\t\t<Form.Group controlId=\"formBasicEmail\">\n\t\t\t\t\t\t<Form.Label>UserID</Form.Label>\n\t\t\t\t\t\t<Form.Control type=\"userid\" placeholder=\"Enter userID\" value={this.state.userId} onChange={this.handleChangeUserId.bind(this)} />\n\t\t\t\t\t</Form.Group>\n\n\t\t\t\t\t<Form.Group controlId=\"formBasicPassword\">\n\t\t\t\t\t\t<Form.Label>ID</Form.Label>\n\t\t\t\t\t\t<Form.Control type=\"id\" placeholder=\"id\" value={this.state.id} onChange={this.handleChangeId.bind(this)} />\n\t\t\t\t\t</Form.Group>\n\n\t\t\t\t\t<Form.Group controlId=\"formBasicChecbox\">\n\t\t\t\t\t\t<Form.Check type=\"checkbox\" label=\"Filter\" onClick={this.handleClick.bind(this)} />\n\t\t\t\t\t</Form.Group>\n\t\t\t\t</Form>\n\t\t\t\t<div className='container row justify-content-center'>\n\t\t\t\t\t{postObjects}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}